// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  login     String      @unique
  password  String
  version   Int         @default(1)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Artist {
  id          String      @id @default(uuid())
  name        String
  grammy      Boolean     @default(false)
  tracks      Track[]
  albums      Album[]
  favorite    FavArtists?
}

model Track {
  id          String      @id @default(uuid())
  name        String
  artistId    String?
  artist      Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  albumId     String?
  album       Album?      @relation(fields: [albumId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  duration    Int
  favorite    FavTracks?
}

model Album {
  id          String      @id @default(uuid())
  name        String
  year        Int
  artistId    String?
  artist      Artist?     @relation(fields: [artistId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  tracks      Track[]
  favorite    FavAlbums?
}

model FavTracks {
  id      String @id @default(uuid())
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String @unique
}

model FavAlbums {
  id      String @id @default(uuid())
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String @unique
}

model FavArtists {
  id       String @id @default(uuid())
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String @unique
}